[[{"l":"Welcome to hedwig","p":["hedwig is a distributed transaction manager, designed to simplify complex workflows involving interactions with multiple third-party resources. It provides a reliable, simplified approach to orchestrating and managing transactions across distributed systems, ensuring efficient and consistent operations."]},{"l":"Quick Installation","p":["From your command line, navigate to your project directory -"]},{"l":"Features"},{"l":"Distributed Transaction Management","p":["Simplifies the management of distributed transactions by handling various third-party and external services in a single, cohesive flow."]},{"l":"Automatic Rollback","p":["Supports multiple rollback strategies tailored to different types of resources, allowing control over how failures are handled."]},{"l":"TypeScript-Ready","p":["Built with TypeScript, offering full type safety and an improved developer experience."]},{"l":"Modular and Lightweight","p":["Designed to be easy to integrate and extend, allowing for seamless customization to fit specific workflow needs."]},{"l":"Contact Us","p":["For any questions, feedback, or contributions, feel free to reach out to us through our GitHub repository. We welcome issues, discussions, and pull requests from the community!","We ❤️ feedback."]}],[{"l":"Use Case"},{"l":"What is hedwig","p":["In modern distributed systems, workflows frequently involve interacting with multiple third-party services like databases, object storage, and caching layers. Each of these services can have their own latency, reliability, and error characteristics, which complicates workflow consistency and data integrity across different parts of a transaction.","hedwig is designed to ensure that transactions involving multiple external resources are managed consistently and efficiently."]},{"l":"Example","p":["Imagine a workflow where you need to upload a receipt to S3 and save order details in a Redis cache. With hedwig, you can manage these operations within a single distributed transaction, ensuring a rollback if any part fails -"]}],[{"l":"Executing a transaction","p":["This guide walks you through setting up a TransactionManager instance with hedwig for managing distributed workflow and executing your first transaction!"]},{"l":"Create a transaction manager","p":["TransactionManager is a class that enables you to set up various connections to third-party services for use within your workflow, allowing you to create and execute distributed transactions. Simply create a new manager instance and configure your desired services. (For detailed information on each service, please refer to the Clients section.)"]},{"l":"Executing a transaction","p":["Once the TransactionManager is configured, use it to create and execute a transaction. The transaction method accepts an async function that allows access to different clients for every supported third party service, in the following example - S3Client and RedisClient.","You can use the different supported methods of every client as specifid in the Clients section."]},{"l":"Rolling back","p":["If an error occurs during the transaction, the rollback procedure will initiate. For more details on the various rollback approaches, please refer to the Strategies page."]}],[{"l":"Strategies","p":["In hedwig, each client method used within a transaction has an associated rollback action that will execute automatically if an error occurs during the transaction. We support two rollback strategies that determine how data is backed up before executing: IN_MEMORY and DUPLICATE_FILE."]},{"l":"Available Strategies"},{"l":"IN_MEMORY","p":["In this strategy, backups are temporarily stored in memory while the transaction is active. For example, if a file is deleted in an S3 bucket, a copy of that file will be kept in memory until the transaction completes. This approach is generally faster, but it requires enough available memory to hold the data being backed up."]},{"l":"DUPLICATE_FILE","p":["With this strategy, backups are saved directly in the third-party service. For example, if a file is to be deleted in S3, a duplicate copy of that file is created and saved in a designated backup bucket within S3 until the transaction successfully completes."]},{"l":"Configuring a Strategy","p":["Each client’s rollback strategy can be configured with a specific enum dedicated to that client. This allows you to control the backup approach individually based on the requirements of each transaction."]}],[{"l":"General","p":["In hedwig, a Client represents a connection to an external, third-party service, such as AWS S3 or Redis, which you can use in distributed workflows."]},{"i":"what-does-a-client-do","l":"What Does a Client Do?","p":["Clients enable integration with external resources by allowing specific actions, such as storing, retrieving, or modifying data. For each client, hedwig manages connections if necessary, performs rollback actions to maintain a consistent state across services in case of an error."]},{"l":"Supported Clients","p":["Currently, hedwig supports -"]},{"l":"1. S3 Client","p":["Allows for object storage operations, such as uploading, copying, and deleting files in AWS S3."]},{"l":"2. Redis Client","p":["Supports key-value operations, such as setting and retrieving values in a Redis store.","Each client can be configured with tailored rollback strategies to control how backups and state recovery are managed, ensuring that the distributed transaction maintains reliability across different services."]},{"l":"Configuring Clients","p":["Clients are easily configured within the Transaction Manager setup. Each client can be customized with specific settings and rollback strategies suited to the transaction’s needs. For more details, please refer to the wanted client page."]}],[{"l":"AWS S3","p":["The S3 Client in hedwig allows integration with Amazon S3, Amazon's scalable storage solution for storing and retrieving any amount of data."]},{"l":"S3 Client Configuration","p":["To configure the S3 Client, pass an object of type S3Config, which extends S3ClientConfig from the @aws-sdk/client-s3 package. You can also specify:","rollbackStrategy(optional) – Determines the rollback behavior when an error occurs (either IN_MEMORY or DUPLICATE_FILE).","backupBucketName(optional) – Specifies the S3 bucket used for file backups when using the DUPLICATE_FILE rollback strategy."]},{"l":"Available Actions","p":["hedwig's S3 Client supports the following actions:","putObject: Uploads a file to a specified bucket with a specified key.","deleteObject: Removes an object from a bucket.","deleteBucket: Deletes an entire bucket.","getObject: Retrieves an object from a bucket.","listBuckets: Lists all buckets available to the S3 client.","headObject: Checks the metadata of a specified object.","headBucket: Checks if a specific bucket exists and is accessible.","Each of these actions allows for safe interactions with S3 and supports rollback strategies to maintain transaction integrity."]}],[{"l":"Redis","p":["The Redis Client in hedwig provides a straightforward way to interact with Redis, a fast, in-memory data store used frequently for caching, session management, and real-time analytics."]},{"l":"Redis Client Configuration","p":["To configure the Redis Client, provide an object of type RedisConfig, which extends RedisClientOptions from the redis package. Additionally, you can specify:","rollbackStrategy(optional) – Defines the rollback approach used during transaction errors (either IN_MEMORY or DUPLICATE_FILE)","backupHashName(optional) – Specifies the Redis hash name used for backups when using the DUPLICATE_FILE strategy."]},{"l":"Available Actions","p":["hedwig's Redis Client supports the following actions:","get: Retrieves the value of a specified key.","set: Sets a value for a specified key.","del: Deletes a specified key.","incr: Increments the integer value of a specified key by one.","decr: Decrements the integer value of a specified key by one.","These actions enable easy interaction with Redis, and each action supports rollback strategies to ensure transactional consistency across workflows."]}],[{"l":"Known Bugs"},{"l":"Known Bugs","p":["If you encounter any bugs or unexpected behavior while using Hedwig, please let us know by opening an issue on our GitHub repository. Your feedback helps us improve and ensure a seamless experience for all users!"]},{"l":"List"}]]